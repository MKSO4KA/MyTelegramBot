import asyncio
import json
import logging
import os
import redis.asyncio as redis
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.client.default import DefaultBotProperties

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –¢–æ–∫–µ–Ω –∏ URL –¥–ª—è Redis –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
# –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')
REDIS_URL = os.getenv('REDIS_URL')

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
logging.basicConfig(level=logging.INFO)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã
if not API_TOKEN or not REDIS_URL:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_API_TOKEN –∏ REDIS_URL")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
redis_client = redis.from_url(REDIS_URL, decode_responses=True)

# –ö–ª—é—á–∏, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Redis
REDIS_DATA_KEY = "telegram_bot_data"
REDIS_OFFSET_KEY = "telegram_bot_offset"

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –•–†–ê–ù–ò–õ–ò–©–ï–ú (REDIS) ---

async def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ (–Ω–∞—à –±—ã–≤—à–∏–π JSON-—Ñ–∞–π–ª) –∏–∑ Redis."""
    json_data = await redis_client.get(REDIS_DATA_KEY)
    if json_data:
        return json.loads(json_data)
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {"config": {}, "codes": {}}

async def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Redis."""
    await redis_client.set(REDIS_DATA_KEY, json.dumps(data, indent=4, ensure_ascii=False))
    logging.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis.")

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê, –ö–û–¢–û–†–ê–Ø –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø –û–î–ò–ù –†–ê–ó ---

async def process_updates():
    logging.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    bot_data = await load_data()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    offset = await redis_client.get(REDIS_OFFSET_KEY)
    offset = int(offset) + 1 if offset else None

    try:
        updates = await bot.get_updates(offset=offset, timeout=20, allowed_updates=["message"])
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram: {e}")
        return

    if not updates:
        logging.info("–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")
        return

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")
    
    data_changed = False # –§–ª–∞–≥, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for update in updates:
        if not update.message or not update.message.text:
            continue
            
        message = update.message
        text = message.text
        
        # --- –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /set_topic ---
        if text.startswith('/set_topic'):
            try:
                member = await bot.get_chat_member(message.chat.id, message.from_user.id)
                if member.status not in ["administrator", "creator"]:
                    await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
                    continue
            except Exception:
                await message.reply("–Ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞.")
                continue

            if not message.is_topic_message:
                await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã (—Ç–æ–ø–∏–∫–∞).")
                continue

            bot_data["config"]["target_chat_id"] = message.chat.id
            bot_data["config"]["target_thread_id"] = message.message_thread_id
            logging.info(f"–ë–æ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç—É {message.chat.id} –∏ —Ç–µ–º–µ {message.message_thread_id}")
            await message.reply("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π —Ç–µ–º–µ.")
            data_changed = True
            continue

        # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –Ω—É–∂–Ω–æ–π —Ç–µ–º—ã ---
        config = bot_data.get("config", {})
        target_chat_id = config.get("target_chat_id")
        target_thread_id = config.get("target_thread_id")
        
        is_correct_topic = (message.chat.id == target_chat_id and 
                            message.message_thread_id == target_thread_id)

        if not is_correct_topic:
            continue # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ —Ç–æ–π —Ç–µ–º—ã

        # --- –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /get ---
        if text.startswith('/get'):
            code_to_send = next((code for code, data in bot_data["codes"].items() if not data.get("is_used")), None)
            if code_to_send:
                bot_data["codes"][code_to_send]["is_used"] = True
                remaining_count = sum(1 for data in bot_data["codes"].values() if not data.get("is_used", False))
                await bot.send_message(
                    chat_id=target_chat_id,
                    message_thread_id=target_thread_id,
                    text=f"<code>{code_to_send}</code>\n\n(–û—Å—Ç–∞–ª–æ—Å—å: {remaining_count})"
                )
                data_changed = True
            else:
                await message.reply("üòî –£–≤—ã, –≤—Å–µ –∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        
        # --- –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add ---
        if text.startswith('/add'):
            # –£–±–∏—Ä–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
            codes_text = text.replace('/add', '').strip()
            codes = [line.strip() for line in codes_text.split('\n') if line.strip()]
            
            if not codes:
                await message.reply("–ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
                continue

            new_codes_count = 0
            for code in codes:
                if code not in bot_data["codes"]:
                    bot_data["codes"][code] = {"is_used": False}
                    new_codes_count += 1
            
            if new_codes_count > 0:
                remaining_count = sum(1 for data in bot_data["codes"].values() if not data.get("is_used", False))
                await message.reply(f"üëç –î–æ–±–∞–≤–ª–µ–Ω–æ {new_codes_count} –Ω–æ–≤—ã—Ö –∫–æ–¥–æ–≤.\n–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {remaining_count}")
                data_changed = True
            else:
                await message.reply("–í—Å–µ —ç—Ç–∏ –∫–æ–¥—ã —É–∂–µ –±—ã–ª–∏ –≤ –±–∞–∑–µ. –ù–æ–≤—ã—Ö –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

    # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if data_changed:
        await save_data(bot_data)
    
    if updates:
        await redis_client.set(REDIS_OFFSET_KEY, updates[-1].update_id)

    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        await process_updates()
    finally:
        # –í–∞–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        await bot.session.close()
        await redis_client.close()
        logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã.")

if __name__ == '__main__':
    asyncio.run(main())
